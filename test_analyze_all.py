#!/usr/bin/env python3
"""Script de test pour l'analyse complÃ¨te d'obsolescence"""
import os
import sys
sys.path.insert(0, os.path.dirname(__file__))

from flask import Flask
from src.database import db
from src.models.equipment import Equipment
from src.models.obsolescence import ObsolescenceInfo
from src.services.obsolescence_analyzer import ObsolescenceAnalyzer
from src.routes.obsolescence_enhanced import extract_os_from_equipments, extract_applications_from_equipments, save_obsolescence_results

# Configuration Flask
app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = f"sqlite:///{os.path.join(os.path.dirname(__file__), 'src', 'database', 'app.db')}"
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db.init_app(app)

with app.app_context():
    print("=== ANALYSE COMPLÃˆTE D'OBSOLESCENCE ===\n")
    
    # RÃ©cupÃ©rer tous les Ã©quipements
    equipments = Equipment.query.all()
    print(f"âœ… {len(equipments)} Ã©quipements trouvÃ©s\n")
    
    # Analyser les OS
    print("ğŸ“Š Analyse des systÃ¨mes d'exploitation...")
    os_data = extract_os_from_equipments(equipments)
    print(f"   {len(os_data)} OS uniques dÃ©tectÃ©s")
    
    analyzer = ObsolescenceAnalyzer()
    os_results = analyzer.analyze_os_obsolescence(os_data)
    print(f"   {len(os_results)} OS analysÃ©s avec succÃ¨s\n")
    
    # Analyser les applications
    print("ğŸ“Š Analyse des applications...")
    apps_data = extract_applications_from_equipments(equipments)
    print(f"   {len(apps_data)} applications uniques dÃ©tectÃ©es")
    
    # Pour le test, on n'analyse que les 5 premiÃ¨res applications pour Ã©viter les coÃ»ts IA
    apps_data_sample = apps_data[:5]
    app_results = analyzer.analyze_applications_obsolescence(apps_data_sample)
    print(f"   {len(app_results)} applications analysÃ©es (Ã©chantillon)\n")
    
    # Sauvegarder les rÃ©sultats
    print("ğŸ’¾ Sauvegarde des rÃ©sultats...")
    all_results = os_results + app_results
    save_obsolescence_results(all_results)
    print(f"   {len(all_results)} produits sauvegardÃ©s\n")
    
    # Afficher un rÃ©sumÃ©
    print("=== RÃ‰SUMÃ‰ ===")
    for result in all_results[:10]:  # Afficher les 10 premiers
        status_emoji = {"Critical": "ğŸ”´", "High": "ğŸŸ ", "Medium": "ğŸŸ¡", "Low": "ğŸŸ¢"}.get(result['status'], "âšª")
        print(f"{status_emoji} {result['name']} - {result['status']} - EOL: {result.get('eol_date', 'N/A')}")
    
    if len(all_results) > 10:
        print(f"... et {len(all_results) - 10} autres produits")
    
    print("\nâœ… Analyse terminÃ©e avec succÃ¨s!")
